
        /* ListNode node1 = new ListNode(1);
        ListNode node2 = new ListNode(2);
        ListNode node3 = new ListNode(3);
        ListNode node4 = new ListNode(4);
        ListNode node5 = new ListNode(5);
        ListNode node6 = new ListNode(6);
        ListNode node7 = new ListNode(7);
        ListNode node8 = new ListNode(8);
        ListNode node9 = new ListNode(9);

        node1.next = node2;
        node2.next = node3;
        node3.next = node4;
        node4.next = node5;
        node5.next = node6;
        node6.next = node3; // creates the cycle

        node7.next = node8;
        node8.next = node9;
        node9.next = node6; // completes the cycle

        problem10(node1);
        System.out.println(problem11(node1).data);
        System.out.println(problem15(node1));
         */

        SinglyList ll = new SinglyList();
        ll.addLast(1);
        ll.addLast(2);
        ll.addLast(3);
        ll.addLast(5);
        ll.addLast(6);
        // System.out.println(reverseListNode(ll.getHead()));
        print(reverseListNode(ll.getHead()));


        // Create the linked lists
        ListNode head1 = new ListNode(1);
        ListNode head2 = new ListNode(2);
        ListNode common = new ListNode(3);
        ListNode temp1 = head1, temp2 = head2;

        // Insert elements in the first list
        temp1.next = new ListNode(4);
        temp1 = temp1.next;
        temp1.next = new ListNode(5);
        temp1 = temp1.next;

        // Insert elements in the second list
        temp2.next = new ListNode(6);
        temp2 = temp2.next;
        temp2.next = new ListNode(7);
        temp2 = temp2.next;

        // Now merge both lists to common node
        temp1.next = common;
        temp2.next = common;

        // Insert elements in the common list
        temp1 = temp1.next;
        temp1.next = new ListNode(8);
        temp1 = temp1.next;
        temp1.next = new ListNode(9);

        System.out.println(yIntersection3(head1, head2).data);